// iOS Audio Helper - Maintains audio context to prevent suspension
import { isIOS } from './deviceDetection'

class IOSAudioHelper {
  private silentAudio: HTMLAudioElement | null = null
  private keepAliveInterval: number | null = null
  private isActive = false

  constructor() {
    if (isIOS()) {
      this.initializeSilentAudio()
    }
  }

  private initializeSilentAudio() {
    // Create a 1-second silent audio file (base64 encoded)
    const silentAudioData = 'data:audio/mp3;base64,SUQzBAAAAAAAI1RTU0UAAAAPAAADTGF2ZjU4LjQ1LjEwkAAAAAAAAA0gAAAAATEFNRTMuMTAw
    
    this.silentAudio = new Audio(silentAudioData)
    this.silentAudio.volume = 0.01 // Very low volume
    this.silentAudio.loop = true
  }

  // Start keeping audio context alive
  startKeepAlive() {
    if (!isIOS() || this.isActive) return
    
    this.isActive = true
    
    // Play silent audio
    if (this.silentAudio) {
      this.silentAudio.play().catch(e => {
        console.warn('iOS Audio Helper: Failed to play silent audio', e)
      })
    }
    
    // Additionally, create a periodic "ping" to keep context active
    this.keepAliveInterval = window.setInterval(() => {
      if (this.silentAudio && this.silentAudio.paused) {
        this.silentAudio.play().catch(() => {})
      }
    }, 4000) // Every 4 seconds
  }

  // Stop keeping audio context alive
  stopKeepAlive() {
    this.isActive = false
    
    if (this.silentAudio) {
      this.silentAudio.pause()
    }
    
    if (this.keepAliveInterval) {
      window.clearInterval(this.keepAliveInterval)
      this.keepAliveInterval = null
    }
  }

  // Check if keep-alive is active
  isKeepAliveActive(): boolean {
    return this.isActive
  }
}

// Export singleton instance
export const iosAudioHelper = new IOSAudioHelper()